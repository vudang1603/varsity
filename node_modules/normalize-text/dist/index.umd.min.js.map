{"version":3,"file":"index.umd.min.js","sources":["../src/capitalizeFirstLetter.js","../src/normalizeDiacritics.js","../src/normalizeWhiteSpaces.js","../node_modules/@bitty/pipe/dist/pipe.mjs","../src/normalizeParagraph.js","../src/normalizeText.js","../src/normalizeName.js"],"sourcesContent":["/**\n * Capitalize first character of received text.\n * @example\n * capitalizeFirstLetter('karl Marx');\n * //=> \"Karl Marx\"\n * @param {string} text - A `string` value.\n * @returns {string}\n */\nvar capitalizeFirstLetter = function (text) {\n    return text.charAt(0).toLocaleUpperCase() + text.substring(1);\n};\nexport default capitalizeFirstLetter;\n//# sourceMappingURL=capitalizeFirstLetter.js.map","/**\n * If `String.prototype.normalize` is supported it normalizes diacritics by\n * replacing them with \"clean\" character from received text.\n * @example\n * normalizeDiacritics('Olá, você aí');\n * //=> 'Ola, voce ai'\n * @param {string} text - A `string` value.\n * @returns {string}\n */\nvar normalizeDiacritics = function (text) {\n    return !!String.prototype.normalize\n        ? text.normalize('NFKD').replace(/[\\u0300-\\u036F]/g, '')\n        : text;\n};\nexport default normalizeDiacritics;\n//# sourceMappingURL=normalizeDiacritics.js.map","/**\n * Normalize all white-space characters and remove trailing ones received text.\n * @example\n * normalizeWhiteSpaces(' What exactly is it?   ');\n * //=> \"What exactly is it?\"\n *\n * normalizeWhiteSpaces('Hi,   how is \\r\\n everything  \\t?');\n * //=> 'Hi, how is everything ?'\n * ```\n * @param {string} text - A `string` value.\n * @returns {string}\n */\nvar normalizeWhiteSpaces = function (text) { return text.replace(/\\s+/g, ' ').trim(); };\nexport default normalizeWhiteSpaces;\n//# sourceMappingURL=normalizeWhiteSpaces.js.map","/**\n * Performs function composition in LTR (Left To Right) direction.\n *\n * @example\n * const normalizeWhiteSpaces = text => name.replace(/\\s+/g, ' ').trim();\n *\n * const getInitials = pipe(\n *   normalizeWhiteSpaces,\n *   name => name.split(' ').map(name => name.charAt(0)),\n *   initials => initials.join('').toLocaleUpperCase()\n * );\n *\n * getInitials('Vitor Luiz Cavalcanti');\n * //=> \"VLC\"\n *\n * @param {Function} fn - An arity N function. Its result is the argument of next one.\n * @param {...Function[]} fns - Functions of arity 1. Each one's result is next's argument.\n * @returns {Function}\n */\nfunction pipe(fn) {\n    var fns = [].slice.call(arguments, 1);\n    return function () {\n        return fns.reduce(function (x, fn) { return fn(x); }, fn.apply(null, arguments));\n    };\n}\n\nexport default pipe;\n//# sourceMappingURL=pipe.mjs.map\n","import pipe from '@bitty/pipe';\nimport capitalizeFirstLetter from './capitalizeFirstLetter';\nimport normalizeWhiteSpaces from './normalizeWhiteSpaces';\n/**\n * Get the last character of received text.\n * @param {string} text - A `string` value.\n * @returns {string}\n */\nvar getLastChar = function (text) { return text.charAt(text.length - 1); };\n/**\n * Add a period at end of a text, if you don't already have one.\n * @param {string} text - A `string` value.\n */\nvar addPeriodAtEnd = function (text) {\n    return getLastChar(text) === '.' ? text : text + '.';\n};\n/**\n * Normalize a paragraph by normalizing its white-spaces, capitalizing first\n * letter and putting a period at end.\n * @example\n * normalizeParagraph(' once upon a time');\n * //=> \"Once upon a time.\"\n * @param {string} value\n * @returns {string}\n */\nvar normalizeParagraph = /*#__PURE__*/ pipe(normalizeWhiteSpaces, addPeriodAtEnd, capitalizeFirstLetter);\nexport default normalizeParagraph;\n//# sourceMappingURL=normalizeParagraph.js.map","import pipe from '@bitty/pipe';\nimport normalizeDiacritics from './normalizeDiacritics';\nimport normalizeWhiteSpaces from './normalizeWhiteSpaces';\n/**\n * Resolve one or multiple texts into a single one.\n * @param {string | string[]} values - A `string` or an array of `string` values.\n * @returns {string}\n */\nvar resolveToText = function (values) {\n    return Array.isArray(values) ? values.join(' ') : values;\n};\n/**\n * Transforms a text to lower case.\n * @param {string} text - A `string` value.\n * @returns {string}\n */\nvar transformToLowerCase = function (text) { return text.toLocaleLowerCase(); };\n/**\n * Resolve received texts (when receives an `Array`) by normalizing its\n * white-spaces and its diacritics and transforming to lower-case.\n * @example\n * normalizeText(' so there\\'s  a  Way to NORMALIZE ');\n * //=> \"so there\\'s a way to normalize\"\n *\n * normalizeText(['Olá\\r\\n', 'como está a   senhorita?']);\n * //=> \"ola como esta a senhorita?\"\n * @param {string | string[]} values - A `string` or an array of `string` values.\n * @returns {string}\n */\nvar normalizeText = /*#__PURE__*/ pipe(resolveToText, normalizeDiacritics, normalizeWhiteSpaces, transformToLowerCase);\nexport default normalizeText;\n//# sourceMappingURL=normalizeText.js.map","import normalizeWhiteSpaces from './normalizeWhiteSpaces';\nimport capitalizeFirstLetter from './capitalizeFirstLetter';\n/**\n * Split text into words.\n * @param {string} text - A `string` value.\n * @returns {string[]}\n */\nvar splitWords = function (text) {\n    return normalizeWhiteSpaces(text.toLocaleLowerCase()).split(' ');\n};\n/**\n * Capitalize word if it isn't an exception.\n * @param {string[]} exceptions - A list of exceptions in lower-case.\n * @returns {(word: string) => string}\n */\nvar capitalizeWordExcept = function (exceptions) { return function (word) {\n    return exceptions.indexOf(word) > -1 ? word : capitalizeFirstLetter(word);\n}; };\n/**\n * Normalize received name by normalizing it's white-spaces and capitalizing\n * first letter of every word but exceptions (received in lower-case).\n * @example\n * normalizeName(' fernanDA  MONTENEGRO');\n * //=> \"Fernanda Montenegro\"\n *\n * normalizeName(' wilson da costa', ['da']);\n * //=> \"Wilson da Costa\"\n * @param {string} name - A `string` value.\n * @param {string} [exceptions] - A list of exceptions in lower-case.\n * @returns {string}\n */\nvar normalizeName = function (name, exceptions) {\n    if (exceptions === void 0) { exceptions = []; }\n    return splitWords(name).map(capitalizeWordExcept(exceptions)).join(' ');\n};\nexport default normalizeName;\n//# sourceMappingURL=normalizeName.js.map"],"names":["capitalizeFirstLetter","text","charAt","toLocaleUpperCase","substring","normalizeDiacritics","String","prototype","normalize","replace","normalizeWhiteSpaces","trim","pipe","fn","fns","slice","call","arguments","reduce","x","apply","normalizeParagraph","length","getLastChar","normalizeText","values","Array","isArray","join","toLocaleLowerCase","name","exceptions","split","map","word","indexOf","capitalizeWordExcept"],"mappings":"yPAQIA,EAAwB,SAAUC,GAClC,OAAOA,EAAKC,OAAO,GAAGC,oBAAsBF,EAAKG,UAAU,ICA3DC,EAAsB,SAAUJ,GAChC,OAASK,OAAOC,UAAUC,UACpBP,EAAKO,UAAU,QAAQC,QAAQ,mBAAoB,IACnDR,GCANS,EAAuB,SAAUT,GAAQ,OAAOA,EAAKQ,QAAQ,OAAQ,KAAKE,QCO9E,SAASC,EAAKC,GACV,IAAIC,EAAM,GAAGC,MAAMC,KAAKC,UAAW,GACnC,OAAO,WACH,OAAOH,EAAII,QAAO,SAAUC,EAAGN,GAAM,OAAOA,EAAGM,KAAON,EAAGO,MAAM,KAAMH,aCd7E,IAiBII,EAAmCT,EAAKF,GAZvB,SAAUT,GAC3B,MAA6B,MANf,SAAUA,GAAQ,OAAOA,EAAKC,OAAOD,EAAKqB,OAAS,GAM1DC,CAAYtB,GAAgBA,EAAOA,EAAO,MAW6BD,GCI9EwB,EAA8BZ,GArBd,SAAUa,GAC1B,OAAOC,MAAMC,QAAQF,GAAUA,EAAOG,KAAK,KAAOH,IAoBApB,EAAqBK,GAbhD,SAAUT,GAAQ,OAAOA,EAAK4B,qGCerC,SAAUC,EAAMC,GAEhC,YADmB,IAAfA,IAAyBA,EAAa,KAzBnB9B,EA0BL6B,EAzBXpB,EAAqBT,EAAK4B,qBAAqBG,MAAM,MAyBpCC,IAlBD,SAAUF,GAAc,OAAO,SAAUG,GAChE,OAAOH,EAAWI,QAAQD,IAAS,EAAIA,EAAOlC,EAAsBkC,IAiBxCE,CAAqBL,IAAaH,KAAK,KA1BtD,IAAU3B"}