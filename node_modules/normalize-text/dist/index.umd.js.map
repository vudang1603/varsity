{"version":3,"file":"index.umd.js","sources":["../src/capitalizeFirstLetter.js","../src/normalizeDiacritics.js","../src/normalizeWhiteSpaces.js","../src/normalizeName.js","../node_modules/@bitty/pipe/dist/pipe.mjs","../src/normalizeParagraph.js","../src/normalizeText.js"],"sourcesContent":["/**\n * Capitalize first character of received text.\n * @example\n * capitalizeFirstLetter('karl Marx');\n * //=> \"Karl Marx\"\n * @param {string} text - A `string` value.\n * @returns {string}\n */\nvar capitalizeFirstLetter = function (text) {\n    return text.charAt(0).toLocaleUpperCase() + text.substring(1);\n};\nexport default capitalizeFirstLetter;\n//# sourceMappingURL=capitalizeFirstLetter.js.map","/**\n * If `String.prototype.normalize` is supported it normalizes diacritics by\n * replacing them with \"clean\" character from received text.\n * @example\n * normalizeDiacritics('Olá, você aí');\n * //=> 'Ola, voce ai'\n * @param {string} text - A `string` value.\n * @returns {string}\n */\nvar normalizeDiacritics = function (text) {\n    return !!String.prototype.normalize\n        ? text.normalize('NFKD').replace(/[\\u0300-\\u036F]/g, '')\n        : text;\n};\nexport default normalizeDiacritics;\n//# sourceMappingURL=normalizeDiacritics.js.map","/**\n * Normalize all white-space characters and remove trailing ones received text.\n * @example\n * normalizeWhiteSpaces(' What exactly is it?   ');\n * //=> \"What exactly is it?\"\n *\n * normalizeWhiteSpaces('Hi,   how is \\r\\n everything  \\t?');\n * //=> 'Hi, how is everything ?'\n * ```\n * @param {string} text - A `string` value.\n * @returns {string}\n */\nvar normalizeWhiteSpaces = function (text) { return text.replace(/\\s+/g, ' ').trim(); };\nexport default normalizeWhiteSpaces;\n//# sourceMappingURL=normalizeWhiteSpaces.js.map","import normalizeWhiteSpaces from './normalizeWhiteSpaces';\nimport capitalizeFirstLetter from './capitalizeFirstLetter';\n/**\n * Split text into words.\n * @param {string} text - A `string` value.\n * @returns {string[]}\n */\nvar splitWords = function (text) {\n    return normalizeWhiteSpaces(text.toLocaleLowerCase()).split(' ');\n};\n/**\n * Capitalize word if it isn't an exception.\n * @param {string[]} exceptions - A list of exceptions in lower-case.\n * @returns {(word: string) => string}\n */\nvar capitalizeWordExcept = function (exceptions) { return function (word) {\n    return exceptions.indexOf(word) > -1 ? word : capitalizeFirstLetter(word);\n}; };\n/**\n * Normalize received name by normalizing it's white-spaces and capitalizing\n * first letter of every word but exceptions (received in lower-case).\n * @example\n * normalizeName(' fernanDA  MONTENEGRO');\n * //=> \"Fernanda Montenegro\"\n *\n * normalizeName(' wilson da costa', ['da']);\n * //=> \"Wilson da Costa\"\n * @param {string} name - A `string` value.\n * @param {string} [exceptions] - A list of exceptions in lower-case.\n * @returns {string}\n */\nvar normalizeName = function (name, exceptions) {\n    if (exceptions === void 0) { exceptions = []; }\n    return splitWords(name).map(capitalizeWordExcept(exceptions)).join(' ');\n};\nexport default normalizeName;\n//# sourceMappingURL=normalizeName.js.map","/**\n * Performs function composition in LTR (Left To Right) direction.\n *\n * @example\n * const normalizeWhiteSpaces = text => name.replace(/\\s+/g, ' ').trim();\n *\n * const getInitials = pipe(\n *   normalizeWhiteSpaces,\n *   name => name.split(' ').map(name => name.charAt(0)),\n *   initials => initials.join('').toLocaleUpperCase()\n * );\n *\n * getInitials('Vitor Luiz Cavalcanti');\n * //=> \"VLC\"\n *\n * @param {Function} fn - An arity N function. Its result is the argument of next one.\n * @param {...Function[]} fns - Functions of arity 1. Each one's result is next's argument.\n * @returns {Function}\n */\nfunction pipe(fn) {\n    var fns = [].slice.call(arguments, 1);\n    return function () {\n        return fns.reduce(function (x, fn) { return fn(x); }, fn.apply(null, arguments));\n    };\n}\n\nexport default pipe;\n//# sourceMappingURL=pipe.mjs.map\n","import pipe from '@bitty/pipe';\nimport capitalizeFirstLetter from './capitalizeFirstLetter';\nimport normalizeWhiteSpaces from './normalizeWhiteSpaces';\n/**\n * Get the last character of received text.\n * @param {string} text - A `string` value.\n * @returns {string}\n */\nvar getLastChar = function (text) { return text.charAt(text.length - 1); };\n/**\n * Add a period at end of a text, if you don't already have one.\n * @param {string} text - A `string` value.\n */\nvar addPeriodAtEnd = function (text) {\n    return getLastChar(text) === '.' ? text : text + '.';\n};\n/**\n * Normalize a paragraph by normalizing its white-spaces, capitalizing first\n * letter and putting a period at end.\n * @example\n * normalizeParagraph(' once upon a time');\n * //=> \"Once upon a time.\"\n * @param {string} value\n * @returns {string}\n */\nvar normalizeParagraph = /*#__PURE__*/ pipe(normalizeWhiteSpaces, addPeriodAtEnd, capitalizeFirstLetter);\nexport default normalizeParagraph;\n//# sourceMappingURL=normalizeParagraph.js.map","import pipe from '@bitty/pipe';\nimport normalizeDiacritics from './normalizeDiacritics';\nimport normalizeWhiteSpaces from './normalizeWhiteSpaces';\n/**\n * Resolve one or multiple texts into a single one.\n * @param {string | string[]} values - A `string` or an array of `string` values.\n * @returns {string}\n */\nvar resolveToText = function (values) {\n    return Array.isArray(values) ? values.join(' ') : values;\n};\n/**\n * Transforms a text to lower case.\n * @param {string} text - A `string` value.\n * @returns {string}\n */\nvar transformToLowerCase = function (text) { return text.toLocaleLowerCase(); };\n/**\n * Resolve received texts (when receives an `Array`) by normalizing its\n * white-spaces and its diacritics and transforming to lower-case.\n * @example\n * normalizeText(' so there\\'s  a  Way to NORMALIZE ');\n * //=> \"so there\\'s a way to normalize\"\n *\n * normalizeText(['Olá\\r\\n', 'como está a   senhorita?']);\n * //=> \"ola como esta a senhorita?\"\n * @param {string | string[]} values - A `string` or an array of `string` values.\n * @returns {string}\n */\nvar normalizeText = /*#__PURE__*/ pipe(resolveToText, normalizeDiacritics, normalizeWhiteSpaces, transformToLowerCase);\nexport default normalizeText;\n//# sourceMappingURL=normalizeText.js.map"],"names":[],"mappings":"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"}